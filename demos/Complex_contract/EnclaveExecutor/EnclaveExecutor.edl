enclave {
    include "user_types.h"
    trusted {
        public void ecall_handle([in] struct Transaction *tx, [in,out] struct Object *obj);
    };

    // 发送会话消息部分
    include "sgx_eid.h"
    include "datatypes.h"
    include "dh_session_protocol.h"
    
    // local attestation发起接口
    trusted{
        public uint32_t test_create_session();
        public uint32_t test_message_exchange();
        public uint32_t test_close_session();
    };
    untrusted {
        int ocall_write([in, string] const char *filename, [in , string] const char *content);
        int ocall_read([in, string] const char *filename, [out] char *content);
    };
    // 
    untrusted{
        uint32_t session_request_ocall([out] sgx_dh_msg1_t *dh_msg1,[out] uint32_t *session_id);
        uint32_t exchange_report_ocall([in] sgx_dh_msg2_t *dh_msg2, [out] sgx_dh_msg3_t *dh_msg3, uint32_t session_id);
        uint32_t send_request_ocall(uint32_t session_id, [in, size = req_message_size] secure_message_t* req_message, size_t req_message_size, size_t max_payload_size, [out, size=resp_message_size] secure_message_t* resp_message, size_t resp_message_size);
        uint32_t end_session_ocall(uint32_t session_id);
    };

    //回应会话消息部分
    trusted{
        public uint32_t session_request([out] sgx_dh_msg1_t *dh_msg1, [out] uint32_t *session_id);
        public uint32_t exchange_report([in] sgx_dh_msg2_t *dh_msg2, [out] sgx_dh_msg3_t *dh_msg3, uint32_t session_id);
        public uint32_t generate_response([in, size = req_message_size] secure_message_t* req_message, size_t req_message_size, size_t max_payload_size, [out, size=resp_message_size] secure_message_t* resp_message, size_t resp_message_size, uint32_t session_id);
        public uint32_t end_session(uint32_t session_id);
    };
};
